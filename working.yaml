AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ApiStageName:
    Type: String
    Description: The API stage name where the Nightlatch API will be deployed
    Default: api
    MinLength: 1
    MaxLength: 20
    AllowedPattern: "[a-zA-Z0-9_]+"
  Vpc:
    Type: AWS::EC2::VPC::Id
    Description: VPC in which the Nightlatch security group should be created
  SecurityGroupName:
    Description: The value of the Name tag that will be given to the Nightlatch security group
    Type: String
    Default: Nightlatch
  Ports:
    Type: String
    Description: Comma-separated list of TCP ports Nightlatch should open
    Default: 22
  Duration:
    Description: Duration, in minutes, that Nightlatch will leave ingress rule in place
    Type: Number
    MinValue: 1
    MaxValue: 10
    Default: 5
Outputs:
  RestAPIId:
    Value: !Ref RestAPI
  APIHandlerName:
    Value: !Ref APIHandler
  APIHandlerArn:
    Value: !GetAtt 
      - APIHandler
      - Arn
  EndpointURL:
    Value: !Sub 'https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/api/'
Resources:
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: Nightlatch
      GroupDescription: Dynamic security group for external access
      Tags:
        - Key: Name
          Value: !Ref SecurityGroupName
      VpcId: !Ref Vpc
  NightlatchUserGroup:
    Type: 'AWS::IAM::Group'
    Properties:
      Policies:
        - PolicyName: NightlatchUserPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'execute-api:Invoke'
                Effect: Allow
                Resource: !Sub 
                  - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/${Stage}/GET/
                  - Stage: !Ref ApiStageName
                    ApiId: !Ref RestAPI
  APIHandlerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: APIHandlerRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'ec2:DescribeSecurityGroups'
                Effect: Allow
                Resource: '*'
              - Action:
                  - 'ec2:AuthorizeSecurityGroupIngress'
                  - 'ec2:RevokeSecurityGroupIngress'
                Condition:
                  StringEquals:
                    'ec2:ResourceTag/Name': !Ref SecurityGroupName
                Effect: Allow
                Resource: '*'
              - Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                Resource: !GetAtt 
                  - DBTable
                  - Arn
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  RestAPIStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref RestAPIDeployment
      RestApiId: !Ref RestAPI
      StageName: Stage
  RestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body:
        info:
          version: '1.0'
          title: Nightlatch
        paths:
          /:
            get:
              security:
                - sigv4: []
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                responses:
                  default:
                    statusCode: 200
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws_proxy
              consumes:
                - application/json
              produces:
                - application/json
        schemes:
          - https
        securityDefinitions:
          sigv4:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "awsSigv4"
        x-amazon-apigateway-binary-media-types:
          - application/octet-stream
          - application/x-tar
          - application/zip
          - audio/basic
          - audio/ogg
          - audio/mp4
          - audio/mpeg
          - audio/wav
          - audio/webm
          - image/png
          - image/jpg
          - image/gif
          - video/ogg
          - video/mpeg
          - video/webm
        definitions:
          Empty:
            type: object
            title: Empty Schema
        swagger: '2.0'
  APIHandlerAuthorization:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref APIHandler
      SourceArn: !Sub 
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/${Stage}/GET/
        - Stage: !Ref ApiStageName
          ApiId: !Ref RestAPI
  RestAPIDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref RestAPI
      Description: 'Nightlatch Deployment'
      StageName: !Ref ApiStageName
  ScheduledExecutions:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Periodic trigger of ingress revocation
      ScheduleExpression: !Sub "rate(1 minutes)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt
            - PeriodicRevocation
            - Arn
          Id: TargetScheduledFunction
  ScheduledHandlerAuthorization:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: events.amazonaws.com
      FunctionName: !Ref PeriodicRevocation
      SourceArn: !GetAtt
        - ScheduledExecutions
        - Arn
  PeriodicRevocation:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: nightlatch
        S3Key: app.zip
      MemorySize: 128
      Environment:
        Variables:
          TABLE_NAME: !Ref DBTable
          GROUP_NAME: !Ref SecurityGroupName
          PORTS: !Ref Ports
          DURATION: !Ref Duration
      Handler: ingress.revoke
      Role: !GetAtt 
        - APIHandlerRole
        - Arn
      Timeout: 30
      Runtime: python3.6
  APIHandler:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: nightlatch
        S3Key: app.zip
      MemorySize: 128
      Environment:
        Variables:
          TABLE_NAME: !Ref DBTable
          GROUP_NAME: !Ref SecurityGroupName
          PORTS: !Ref Ports
          DURATION: !Ref Duration
      Handler: ingress.authorize
      Role: !GetAtt 
        - APIHandlerRole
        - Arn
      Timeout: 30
      Runtime: python3.6
  DBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      ProvisionedThroughput:
        WriteCapacityUnits: 5
        ReadCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: k
          AttributeType: S
      KeySchema:
        - KeyType: HASH
          AttributeName: k